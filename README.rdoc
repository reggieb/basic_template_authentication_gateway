== Basic Template for an Authentication Gateway

Antechamber is currently at an early stage of development. I wish to preserve
a copy of its current state, as a reference of what a minimal authentication
gateway can look like.

This example is of a rails application set up as a gateway to a single authority:
Google.

=== Why have an authentication gateway?

An Authentication Gateway can greatly simplify the management of the relationship
between a group of web applications, and the authority applications used to
authenticate access to those applications.

The current trend in authentication is to use trusted authorities to identify
users, rather than relying on password exchange. There are many advantages to
doing this, many to do with a user not having to remember a username and
password for every web resource they use.

The main practical problem with this strategy is that there is not a single
authority that all users will want to use. Therefore, each web application
needs to be able to authenticate via a number of authorities.

If you only have one application within an organisation this is not much of a
problem. However, if you have many applications, this can be a real a headache,
as each application must register with each authority for the process to work.

If you have ten web applications, and use five authorities, that can mean you
need to manage 5 x 10 = 50 relationships. If you add or remove an authority,
each of the ten applications needs to be updated and the registration with the
authority updated for each.

An authentication gateway sits between the web applications and the trusted
authorities. The gateway registers with each of the authorities. Each application
registers with the gateway. That is, the gateway acts as THE trusted authority
for all the web applications.

With a gateway in place, should you wish to add another authority, you only
need to register the gateway with the new authority. All the web applications
using the gateway will then automatically get access to the new authority. Only
the gateway needs to register with each authority.

If we return to the ten applications using five trusted authorities example, the
number of relationships drops from 50, to 5 + 10 = 15.

=== Client applications
Each client application needs to be registered with the gateway via the
client_apps controller. This process will generate an id/secret pair that is
unique for that client application.

The client application uses oauth to authenticate via the gateway.

==== Example rails client application

Add this to Gemfile:

    gem 'omniauth'
    gem 'omniauth-oauth2'

And bundle install.

Then add an initializer: /config/initializers/omniauth.rb:

    APP_ID = '<id_registered_on_gateway>'
    APP_SECRET = '<secret_registered_on_gateway>'

    CUSTOM_PROVIDER_URL = '<url_of_gateway>'

    Rails.application.config.middleware.use OmniAuth::Builder do
      provider :antechamber, APP_ID, APP_SECRET
    end

The authentication process is initiated by sending the user to "/auth/antechamber"
which you can do with a link:

    <% link_to 'Log on', '/auth/antechamber' %>

On clicking the link the user will be redirected to a google authentication screen.
That redirect starts with the user being sent to the local instance of
ominauth's '/auth' handler. This then sends them to the antechamber gateway,
The gateway then forwards them to google. As this is all done via redirects,
all the user sees on clicking the link, is the google authentication screen
appear.

Once the user has authenticated (or not) with google, they will be redirected
back to "/auth/antechamber/callback". See the omniauth README for information on
how you can handle the information returned: https://github.com/intridea/omniauth